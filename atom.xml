<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JaguarJack&#39;s Blog</title>
  
  <subtitle>做人呢最重要的就是开心</subtitle>
  <link href="https://jaguarjack.github.io/atom.xml" rel="self"/>
  
  <link href="https://jaguarjack.github.io/"/>
  <updated>2021-06-24T03:27:06.297Z</updated>
  <id>https://jaguarjack.github.io/</id>
  
  <author>
    <name>JaguarJack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 协程访问 Chan 的疑问</title>
    <link href="https://jaguarjack.github.io/2021/06/21/goroutine-chan/"/>
    <id>https://jaguarjack.github.io/2021/06/21/goroutine-chan/</id>
    <published>2021-06-21T00:00:00.000Z</published>
    <updated>2021-06-24T03:27:06.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遇到的题目"><a href="#遇到的题目" class="headerlink" title="遇到的题目"></a>遇到的题目</h2><p>使用 <code>Channel</code> 进行任务编排的题，你可以尝试做一下：有四个 <code>goroutine</code>，编号为 <code>1、2、3、4</code>。每秒钟会有一个 <code>goroutine</code>打印出它自己的编号，要求你编写一个程序，让输出的编号总是按照 <code>1、2、3、4、1、2、3、4、……</code>的顺序打印出来。</p><span id="more"></span><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printer</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">1</span>; i &lt;= <span class="number">4</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">             time.sleep(time.Duration(i * <span class="number">10</span>) * time.Millisecond)</span><br><span class="line">             <span class="keyword">for</span> &#123;</span><br><span class="line">                 &lt;-ch</span><br><span class="line"></span><br><span class="line">                 fmt.Prinln(i)</span><br><span class="line"></span><br><span class="line">                 time.sleep(time.second)</span><br><span class="line"></span><br><span class="line">                 ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    time.sleep(time.Minute)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="疑问产生的地方"><a href="#疑问产生的地方" class="headerlink" title="疑问产生的地方"></a>疑问产生的地方</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li>创建一个阻塞的 <code>Chan</code></li><li>创建四个 <code>Goroutine</code>，有前后顺序，保证了第一个（i = 1） <code>Goroutine</code> 可以首先访问 <code>Chan</code></li><li>主 Goroutine 往 Chan 中添加第一个元素</li><li>由于子 <code>Goroutine</code> 启动之后，会 <code>sleep</code>，所以 <code>i=1</code> 的 <code>Goroutine</code> 会最先访问 <code>Chan</code>, 访问之后呢，（其他的 Goroutine 就会阻塞）。 然后输出，输出之后 sleep，在加入元素。</li></ul><p>这段代码在输出之后的确是 1，2，3，4 循环打印。疑惑点在哪里呢？就是在第一个 Goroutine 结束之后，为什么 2，3，4 号 Goroutine 没有去争抢 ch，应该是 2,3,4 随机输出。可是并没有出现这种情况，而是顺序输出。</p><h2 id="疑惑解决"><a href="#疑惑解决" class="headerlink" title="疑惑解决"></a>疑惑解决</h2><p>在此之前，先看一下 <code>src/runtime/chan.go</code> 的 <code>chan</code> 的结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">   qcount   <span class="keyword">uint</span>           <span class="comment">// total data in the queue</span></span><br><span class="line">   dataqsiz <span class="keyword">uint</span>           <span class="comment">// size of the circular queue</span></span><br><span class="line">   buf      unsafe.Pointer <span class="comment">// points to an array of dataqsiz elements</span></span><br><span class="line">   elemsize <span class="keyword">uint16</span></span><br><span class="line">   closed   <span class="keyword">uint32</span></span><br><span class="line">   elemtype *_type <span class="comment">// element type</span></span><br><span class="line">   sendx    <span class="keyword">uint</span>   <span class="comment">// send index</span></span><br><span class="line">   recvx    <span class="keyword">uint</span>   <span class="comment">// receive index</span></span><br><span class="line">   recvq    waitq  <span class="comment">// list of recv waiters</span></span><br><span class="line">   sendq    waitq  <span class="comment">// list of send waiters</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// lock protects all fields in hchan, as well as several</span></span><br><span class="line">   <span class="comment">// fields in sudogs blocked on this channel.</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class="line">   <span class="comment">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class="line">   <span class="comment">// with stack shrinking.</span></span><br><span class="line">   lock mutex <span class="comment">// 说明 channel 底层也是基于 mutex 实现的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看 <code>recvq</code> 和 <code>sendq</code>, 这两个是什么呢？</p><ul><li>recvq : 协程队列，等待读取消息的协程队列</li><li>sendq : 协程队列，等待发送消息的协程队列</li></ul><p>这能说明什么呢？这里首先明确下 <code>recvq</code> 是队列结构。再来返回来看上面那段代码，启动<code> Goroutine</code> 其实是延迟的，说明他们是顺序启动的，在 <code>1</code> 号获取到 <code>ch</code> 的值之后，首先阻塞的便是 <code>2</code> 号，那么 <code>2</code> 号便会进入<code>recvq</code>队列，三号四号依次进入队列，阻塞等待唤醒。</p><p>如上面所说，结果是顺序的。因为在 <code>1</code> 号 <code>Goroutine</code> 启动之后，它使用 <code>time.sleep</code>。导致其他 <code>Goroutine</code> 获取 <code>ch</code> 的时候会阻塞。这个阻塞说明什么呢? 如果没有 <code>time.sleep</code>的话，结果又是怎么样的。在这之前先说一下老生常谈的话题</p><h2 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h2><p>GMP 一直是学习 GO 必须学习的话题。到处都是解析。这里也不做深入解释了。主要看一下 GMP 模型.</p><ul><li>G: 代表 goroutine</li><li>M: 代表 系统线程</li><li>P: 代表 与调度相关的context</li></ul><p>每一个 <code>M</code> 都拥有一个 <code>P</code>，<code>P</code> 也维护一个能运行的 <code>Goroutine</code> 队列，由该 <code>P</code> 绑定的线程执行。</p><h2 id="阻塞说明什么"><a href="#阻塞说明什么" class="headerlink" title="阻塞说明什么"></a>阻塞说明什么</h2><p>当 <code>1</code> 号创建之后，会立即获取 <code>ch</code> 的值，因为主 <code>goroutine </code>已经往 <code>ch </code>里面加入元素，所以此时 <code>ch</code> 是可读。<code>1</code> 号由 由 <code>GMP</code> 模型可以知道，<code>runtime</code> 调度为 <code>running</code>。来执行获取 ch，之后 1 号 time.sleep 阻塞。然后变成 waiting 状态。</p><p>还记得 ch 的两个队列吗？发送和读取，此时 1 号会被放入到发送消息的队列等待唤醒。由于 ch 目前是空的，在 time.sleep 之后才会加入元素。此时2号被创建并且被调度去获取 ch 的值，发现 ch 阻塞之后会被放入 recvq 队列，就是等待读取的队列。<code>3</code> <code>4</code> 号依次。在 1 秒之后，1 号变为可发送状态，向 ch 中发送元素，然后被加入 <code>recvq</code> 队列尾部，此时队列头部的 2 号会立即被唤醒来获取，然后被加入发送队列。如此重复，就可以顺序打印。</p><h2 id="没有-time-sleep-的结果"><a href="#没有-time-sleep-的结果" class="headerlink" title="没有 time.sleep 的结果"></a>没有 time.sleep 的结果</h2><p>1 号 <code>Goroutine</code> 的访问调度和上一步是一样的，主要是在下一步。如果 1 号没有阻塞的话，会发生什么呢？ch 会立马变成可读。那么此时 2 3 4 号 <code>Goroutine</code> 会怎么样？根据 <strong>M:N</strong> 的原则， 2 3 4 应该会被随机分配的 M 调度的 G 队列里面，此时就会发生争抢？那么争抢的结果就是访问是随机的。也就说 2 3 4 中谁先访问了 ch，是不确定的。所以，当你去掉 <code>time.sleep</code> 之后，顺序会变成随机。当然是按照一定的随机顺序打印。因为在确定 2 3 4 访问之后 读取的队列就是确定了，打印的顺序结果就是队列的顺序。</p><p>详细的 <strong>GMP</strong> 是如何调度请查看 <a href="%E8%B0%83%E5%BA%A6%E5%99%A8">https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#65-%E8%B0%83%E5%BA%A6%E5%99%A8</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;遇到的题目&quot;&gt;&lt;a href=&quot;#遇到的题目&quot; class=&quot;headerlink&quot; title=&quot;遇到的题目&quot;&gt;&lt;/a&gt;遇到的题目&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;Channel&lt;/code&gt; 进行任务编排的题，你可以尝试做一下：有四个 &lt;code&gt;goroutine&lt;/code&gt;，编号为 &lt;code&gt;1、2、3、4&lt;/code&gt;。每秒钟会有一个 &lt;code&gt;goroutine&lt;/code&gt;打印出它自己的编号，要求你编写一个程序，让输出的编号总是按照 &lt;code&gt;1、2、3、4、1、2、3、4、……&lt;/code&gt;的顺序打印出来。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="https://jaguarjack.github.io/tags/go/"/>
    
    <category term="goroutine" scheme="https://jaguarjack.github.io/tags/goroutine/"/>
    
    <category term="chan" scheme="https://jaguarjack.github.io/tags/chan/"/>
    
  </entry>
  
  <entry>
    <title>Go 字节对齐</title>
    <link href="https://jaguarjack.github.io/2021/06/17/go-byte-align/"/>
    <id>https://jaguarjack.github.io/2021/06/17/go-byte-align/</id>
    <published>2021-06-17T00:00:00.000Z</published>
    <updated>2021-06-21T07:44:02.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是字节对齐"><a href="#什么是字节对齐" class="headerlink" title="什么是字节对齐"></a>什么是字节对齐</h2><p>现代计算机中，<code>内存空间</code>按照字节划分，理论上可以从任何起始地址访问任意类型的变量。但实际中在访问特定类型变量时经常在特定的内存地址访问，这就需要各种类型数据按照<code>一定的规则</code>在空间上排列，而不是<code>顺序</code>一个接一个地存放，这就是对齐。</p><span id="more"></span><h2 id="为什么要字节对齐"><a href="#为什么要字节对齐" class="headerlink" title="为什么要字节对齐"></a>为什么要字节对齐</h2><ul><li>某些特定的平台只能从特定的地址存取，而不允许任意存放</li><li>常见的情况是，如果不按照平台的要求对齐，会降低 <code>CPU</code> 访问数据的频率。例如 <code>32</code> 位的字长的机器，如果数据没有存在 <code>4</code> 字节的整除的内存地址处，那么 <code>CPU</code> 就要分两个周期访问。而且合理的字节对齐，还可以有效节省空间</li></ul><h2 id="结构体对齐"><a href="#结构体对齐" class="headerlink" title="结构体对齐"></a>结构体对齐</h2><p>  其实字节对齐的问题，大部分都是针对复合类型的结构体，结构体的成员变量的位置有时候会影响存储空间。</p><h3 id="对齐准则"><a href="#对齐准则" class="headerlink" title="对齐准则"></a>对齐准则</h3><ul><li>结构体变量的首地址能够被其<code>最宽</code>基本类型成员的大小所整除</li><li>结构体每个成员相对结构体首地址的偏移量<code>offset</code>都是成员大小的整数倍，如有需要编译器会在成员之间加上填充字节 <code>internal adding</code></li><li>结构体的总大小为结构体<code>最宽</code>基本类型成员大小的整数倍，如有需要编译器会在最末一个成员之后加上填充字节 <code>trailing padding</code></li></ul><p>假设有下面的结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">uint8</span></span><br><span class="line">    b <span class="keyword">uint64</span></span><br><span class="line">    c <span class="keyword">uint16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通常认为这个结构体会占 1 + 8 + 2 = 11 个字节，但是并不是的</p></blockquote><p>根据准则来分析下该结构体的所占字节。这个结构体最宽的类型成员是 <code>uint64</code>。那么存放的地址必须是 <code>地址 % 8 = 0</code>, 这是编译器的行为，是不需要开发者管的，知道是这么回事就行了。</p><p>假设地址从 <code>0x00</code> 开始, <code>uint8</code> 占一个 <code>1</code> 字节, 那么下个成员就是从 <code>0x01</code> 开始，下一个成员占了 <code>8</code> 个字节,根据第二条准则成员相对首地址都是成员大小整数倍。很显然 <code>uint64</code> 这个成员从 <code>0x08</code> 开始填充，<code>uint8</code> 和 <code>uint64</code> 之间的空间编译器会自动填充字节。<br>uint64 填充之后地址来到 0x16。uint16 占了两个字节，正好可以整除。那么 uint16 就会紧接 uint16 填充。注意，这里没有结束。最后一条准则结构体总大小必须是最大成员宽度的整数倍。所以 uint16 成员之后也会被填充字节。</p><p>那么这个结构的大小就是 <strong>8 + 8 + 8 = 24</strong>。并不是 <strong>11</strong>。</p><p>来看一下实际地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> test test</span><br><span class="line"></span><br><span class="line">fmt.Println(unsafe.Sizeof(test)) <span class="comment">// 24 个字节</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p %p&quot;</span>, &amp;test.a, &amp;test.b, &amp;test.c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>a 地址 0xc000016180/ b 地址 0xc000016188/ c 地址 0xc000016190</p></blockquote><p>和预料的一样。每个地址间相差八个字节。</p><p>对于字节对齐而言，其实都是编译器的行为，开发者无法改变，但是可以通过调整成员变量来减少内存存储空间。对于上面的结构体而言，可以稍作调整。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> test <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">uint8</span></span><br><span class="line">    c <span class="keyword">uint16</span></span><br><span class="line">    b <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> test test</span><br><span class="line"></span><br><span class="line">fmt.Println(unsafe.Sizeof(test)) <span class="comment">// 16 个字节</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p %p %p&quot;</span>, &amp;test.a,  &amp;test.c, &amp;test.b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>a地址 0xc00001c090/ c 地址 0xc00001c092/ b地址 0xc00001c098</p></blockquote><p>通过上面的三大准则可以推测出，这个结构实际就是 <code>16</code> 字节。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是字节对齐&quot;&gt;&lt;a href=&quot;#什么是字节对齐&quot; class=&quot;headerlink&quot; title=&quot;什么是字节对齐&quot;&gt;&lt;/a&gt;什么是字节对齐&lt;/h2&gt;&lt;p&gt;现代计算机中，&lt;code&gt;内存空间&lt;/code&gt;按照字节划分，理论上可以从任何起始地址访问任意类型的变量。但实际中在访问特定类型变量时经常在特定的内存地址访问，这就需要各种类型数据按照&lt;code&gt;一定的规则&lt;/code&gt;在空间上排列，而不是&lt;code&gt;顺序&lt;/code&gt;一个接一个地存放，这就是对齐。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="https://jaguarjack.github.io/tags/go/"/>
    
    <category term="字节对齐" scheme="https://jaguarjack.github.io/tags/%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 非常有用却不常用的方法记录</title>
    <link href="https://jaguarjack.github.io/2019/05/15/laravel-userfule-method/"/>
    <id>https://jaguarjack.github.io/2019/05/15/laravel-userfule-method/</id>
    <published>2019-05-14T22:11:59.000Z</published>
    <updated>2021-06-16T01:05:39.125Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客记录一些 Laravel 框架一些不常用但非常实用的方法。或者一些非常有用的小技巧，可以显著提高代码的可读性。并且记录一些难以发现的技巧性的使用。</p><span id="more"></span><h2 id="获取表结构信息"><a href="#获取表结构信息" class="headerlink" title="获取表结构信息"></a>获取表结构信息</h2><p>网上有很多关于 <code>Laravel</code> 获取表信息的文章，很多都是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数据库所有表信息</span></span><br><span class="line">DB::select(<span class="string">&#x27;show tables&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取表 column 信息</span></span><br><span class="line">Db::select(<span class="string">&#x27;show full columns from  $table&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取表信息</span></span><br><span class="line">DB::select(<span class="string">&#x27;show table status&#x27;</span>))</span><br></pre></td></tr></table></figure><p>当然这样是可以获取到的，没有任何问题，关键这样让代码看起来有点难受，其实 <code>Laravel</code> 提供了一系列这样的操作。下面来提供该演示:</p><h3 id="获取所有表"><a href="#获取所有表" class="headerlink" title="获取所有表"></a>获取所有表</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Illuminate\Support\Facades\DB::connection()-&gt;getDoctrineSchemaManager()-&gt;listTableNames())</span><br></pre></td></tr></table></figure><h3 id="获取表所有-Column-字段"><a href="#获取表所有-Column-字段" class="headerlink" title="获取表所有 Column 字段"></a>获取表所有 Column 字段</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Illuminate\Support\Facades\Schema::getColumnListing(<span class="string">&#x27;table&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="获取表单个字段的信息"><a href="#获取表单个字段的信息" class="headerlink" title="获取表单个字段的信息"></a>获取表单个字段的信息</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取单个字段信息</span></span><br><span class="line"><span class="variable">$field</span> = \Illuminate\Support\Facades\DB::connection()-&gt;getDoctrineColumn(<span class="string">&#x27;table&#x27;</span>, <span class="string">&#x27;field_name&#x27;</span>)</span><br><span class="line"><span class="variable">$field</span>-&gt;getComment(); <span class="comment">// 获取注释</span></span><br><span class="line"><span class="variable">$field</span>-&gt;getType(); <span class="comment">// 获取类型</span></span><br></pre></td></tr></table></figure><h3 id="获取表信息"><a href="#获取表信息" class="headerlink" title="获取表信息"></a>获取表信息</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Illuminate\Support\Facades\DB::connection()-&gt;getDoctrineSchemaManager()-&gt;listTableDetails(<span class="string">&#x27;table&#x27;</span>)-&gt;getOptions());</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇博客记录一些 Laravel 框架一些不常用但非常实用的方法。或者一些非常有用的小技巧，可以显著提高代码的可读性。并且记录一些难以发现的技巧性的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="laravel" scheme="https://jaguarjack.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>解决 IE/Edge 导出 Excel 中文文件名乱码</title>
    <link href="https://jaguarjack.github.io/2019/05/09/ie-urlencode/"/>
    <id>https://jaguarjack.github.io/2019/05/09/ie-urlencode/</id>
    <published>2019-05-08T22:29:03.000Z</published>
    <updated>2021-06-16T01:05:39.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目中导出 Excel 的时候，由于文件名设置的是中文字符串，在 Google 浏览器是正常的导出，文件名不会出现乱码，但是在 Edge/IE 浏览器下就会出现乱码的情况。Google 一下你会搜到很多答案，当然很多都是不靠谱的，最后问题是解决了。但是遇到这个问题的人并没有说明为什么会出现这个问题，究其根源，看博客的意思应该是从墙外找到的答案。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>解决这个很简单，但是需要做的就是去了解为什么要这样做，下面是解决办法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeFileName</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$ua</span> = strtolower(<span class="variable">$_SERVER</span>(<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否为IE或Edge浏览器</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/msie/&#x27;</span>, <span class="variable">$ua</span>) || preg_match(<span class="string">&#x27;/edge/&#x27;</span>, <span class="variable">$ua</span>)) &#123;</span><br><span class="line">            <span class="comment">//使用 urlencode 对文件名进行重新编码</span></span><br><span class="line">            <span class="keyword">return</span> str_replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;%20&#x27;</span>, urlencode(<span class="variable">$filename</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实问题解决是很简单的，使用<code>urlencode</code>函数就可以了。下面慢慢道来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;项目中导出 Excel 的时候，由于文件名设置的是中文字符串，在 Google 浏览器是正常的导出，文件名不会出现乱码，但是在 Edge/I</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="excel" scheme="https://jaguarjack.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 学习笔记</title>
    <link href="https://jaguarjack.github.io/2019/05/08/nginx-conf/"/>
    <id>https://jaguarjack.github.io/2019/05/08/nginx-conf/</id>
    <published>2019-05-08T08:06:54.000Z</published>
    <updated>2021-06-16T01:05:39.130Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要记录 Nginx 一些学习和笔记。还有遇到的问题。</p><h2 id="nginx-conf-文件结构"><a href="#nginx-conf-文件结构" class="headerlink" title="nginx.conf 文件结构"></a>nginx.conf 文件结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">... # 全局模块</span><br><span class="line"></span><br><span class="line"># events 模块</span><br><span class="line">events &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># http块</span><br><span class="line">http &#123;</span><br><span class="line">    # http 全局块</span><br><span class="line">    ...</span><br><span class="line">    # server 块</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        # server 全局块</span><br><span class="line">        ...</span><br><span class="line">        # location 块</span><br><span class="line">        location [PATTERN]</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面以大括号为分割 Nginx.conf 可分为三大块<code>全局块</code>, <code>events</code>, <code>http</code>。其中 http 模块里面有分为 <code>全局块</code>, <code>server</code> 两个块。server 可以有多个。server 里面又分为 <code>全局</code> 和 <code>location</code> 两个模块。location 也是可以有多个。在 Nginx 使用方面，大多数都体现在配置文件。应用方面也体现在配置了，当然 Nginx 配置是很丰富多样的。</p><h3 id="全局模块"><a href="#全局模块" class="headerlink" title="全局模块"></a>全局模块</h3><p>全局模块是默认配置文件开始到 events 这一块内容，主要设置一些 Nginx 运行指令，通常包括 Nginx 运行的用户/组，worker proccess 数，Master 进程 PID 存储路径，日志的存放路径以及配置文件的引入等等。</p><h3 id="events-模块"><a href="#events-模块" class="headerlink" title="events 模块"></a>events 模块</h3><p>events 模块主要是 Nginx 与用户链接的设置。包括设置事件驱动模型和每个 worker proccess 允许的最大链接数目，这部分设置对 Nginx 的性能影响很大，主要体现事件驱动上。</p><h3 id="Http-模块"><a href="#Http-模块" class="headerlink" title="Http 模块"></a>Http 模块</h3><p>Http 模块是 Nginx 服务的重要部分，代理，缓存和日志等绝大数功能和第三方模块都是放在这个模块中。</p><h4 id="Http全局块"><a href="#Http全局块" class="headerlink" title="Http全局块"></a>Http全局块</h4><p>Http 全局块中配置的指令包括文件引入，MIME-Type 定义，日志自定义，是否使用 sendfile 传输文件，链接超时时间，但链接请求上限等。</p><h4 id="Server-模块"><a href="#Server-模块" class="headerlink" title="Server 模块"></a>Server 模块</h4><p>Http 块中可以包含多个 Server 模块，每个 Server 模块对应着一台虚拟机，可以为多台主机提供服务，注意这里是一组逻辑上关系。</p><h5 id="Server-全局模块"><a href="#Server-全局模块" class="headerlink" title="Server 全局模块"></a>Server 全局模块</h5><p>Server 全局模块提供一些基础功能， 包括虚拟机的监听配置和配置虚拟机的名称或者 IP 地址。</p><h5 id="Location-模块"><a href="#Location-模块" class="headerlink" title="Location 模块"></a>Location 模块</h5><p>Server 模块的大多数功能都在 Location 中实现，其实整个 Nginx 配置重要的配置都在这块，location 主要对 Nginx 的接收的 uri 进行匹配，对特定的请求进行处理，地址定向，数据缓存和应答等控制功能都是在这部分实现，第三方模块也提供了这块的功能</p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>用流程图表示可能更加明显，来看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    Nginx.conf--&gt;id1&#123;全局模块&#125;;</span><br><span class="line">    Nginx.conf--&gt;id2&#123;Event模块&#125;;</span><br><span class="line">    Nginx.conf--&gt;id3&#123;Http模块&#125;;</span><br><span class="line">    id1&#123;全局模块&#125;--&gt;运行用户组;</span><br><span class="line">    id1&#123;全局模块&#125;--&gt;workerProccess数目;</span><br><span class="line">    id1&#123;全局模块&#125;--&gt;MasterPID存储路径;</span><br><span class="line">    id1&#123;全局模块&#125;--&gt;日志存放路径;</span><br><span class="line">    id1&#123;全局模块&#125;--&gt;配置文件引入;</span><br><span class="line">    id2&#123;Event模块&#125;--&gt;事件驱动模型;</span><br><span class="line">    id2&#123;Event模块&#125;--&gt;允许最大链接数目;</span><br><span class="line">    id3&#123;Http模块&#125;--&gt;Http全局模块;</span><br><span class="line">    Http全局模块--&gt;文件引入;</span><br><span class="line">    Http全局模块--&gt;MIME-Type定义;</span><br><span class="line">    Http全局模块--&gt;自定义日志;</span><br><span class="line">    Http全局模块--&gt;sendfile传输文件;</span><br><span class="line">    Http全局模块--&gt;链接超时;</span><br><span class="line">    Http全局模块--&gt;链接请求上限;</span><br><span class="line">    id3&#123;Http模块&#125;--&gt;Server模块;</span><br><span class="line">    Server模块--&gt;Server全局模块;</span><br><span class="line">    Server全局模块--&gt;虚拟机的监听;</span><br><span class="line">    Server全局模块--&gt;配置虚拟机名称或者IP地址;</span><br><span class="line">    Server模块--&gt;Location模块;</span><br><span class="line">    Location模块--&gt;请求处理; </span><br><span class="line">    Location模块--&gt;地址定向;</span><br><span class="line">    Location模块--&gt;数据缓存; </span><br><span class="line">    Location模块--&gt;请求应答; </span><br><span class="line">    Location模块--&gt;反向代理; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章主要记录 Nginx 一些学习和笔记。还有遇到的问题。&lt;/p&gt;
&lt;h2 id=&quot;nginx-conf-文件结构&quot;&gt;&lt;a href=&quot;#nginx-conf-文件结构&quot; class=&quot;headerlink&quot; title=&quot;nginx.conf 文件结构&quot;&gt;&lt;/a&gt;ng</summary>
      
    
    
    
    <category term="服务器运维" scheme="https://jaguarjack.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="服务器" scheme="https://jaguarjack.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="nginx" scheme="https://jaguarjack.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 简单题（一）</title>
    <link href="https://jaguarjack.github.io/2019/05/07/leetcode-easy-one/"/>
    <id>https://jaguarjack.github.io/2019/05/07/leetcode-easy-one/</id>
    <published>2019-05-07T15:02:42.000Z</published>
    <updated>2021-06-16T01:05:39.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>Example:</p><blockquote><p>Given nums = [2, 7, 11, 15], target = 9,</p></blockquote><p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>上来不由分说，先来一个 For 再说😄</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumtotarget</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"> l := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">r := target - v</span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>; j &lt; l; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> r == nums[j] &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;i, j&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美成功运行了，哈哈。想想这样不行啊 O(n^2)。然后仔细想了一下，可以利用 map 的特性来处理，就有下面这一段代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumtotarget</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">numbers := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">j, ok := numbers[v]</span><br><span class="line">numbers[target - v] = i</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;j, i&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一刷，简单题都扛不住了。只能慢慢来了</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p><p>Example 1:</p><blockquote><p>Input: 123<br>Output: 321</p></blockquote><p>Example 2:</p><blockquote><p>Input: -123<br>Output: -321</p></blockquote><p>Example 3:</p><blockquote><p>Input: 120<br>Output: 21</p></blockquote><p>Note:<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>注意的就是 int32 溢出的问题了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line">n := x % <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">x = x / <span class="number">10</span></span><br><span class="line">num = num * <span class="number">10</span> + n</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -2147483648 到 2147483647</span></span><br><span class="line"><span class="keyword">if</span> num &gt; math.MaxInt32 || num &lt; math.MinInt32 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><p>Example 1:</p><blockquote><p>Input: 121<br>Output: true</p></blockquote><p>Example 2:</p><blockquote><p>Input: -121<br>Output: false</p></blockquote><p>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<br>Example 3:</p><blockquote><p>Input: 10<br>Output: false</p></blockquote><p>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</p><h2 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h2><p>这道题数字回文，其实和上面的反转是一个道理，就是比较反转后的数字和实参是否相等就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line">cache := x</span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line">n := x % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">x = x / <span class="number">10</span></span><br><span class="line">num = num * <span class="number">10</span> + n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cache == num &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h2&gt;&lt;p&gt;Given an array of integers, return indices of the two numbers such</summary>
      
    
    
    
    <category term="leetcode" scheme="https://jaguarjack.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://jaguarjack.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 主题增加新的第三方评论系统 utterance</title>
    <link href="https://jaguarjack.github.io/2019/05/06/hexo-add-comment/"/>
    <id>https://jaguarjack.github.io/2019/05/06/hexo-add-comment/</id>
    <published>2019-05-06T14:00:19.000Z</published>
    <updated>2021-06-16T01:05:39.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>博客最近切换到了 <code>hexo</code> 博客, 目前用起来感觉很方便。很喜欢 markdown 写作。当然利用 Github Pages 也省下了一笔费用，某套路云的套路令人感到恶心。这里就不多说了。为什么要换评论呢？因为我使用的 <code>next</code> 主题的评论都不太合我的心意，Disqus 很好，但是广告太多，其他仿 git 的评论总觉得别扭，于是我也翻了找找看，发现了 <code>utterance</code>，觉得挺不错的，简洁风格也不缺失。所以就打算换这个了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>hexo 的主题改起来还是很方便的，从配置开始，然后添加一小段的模块代码就可以了。标签也可以仿照其他文件，So Easy！开始动手吧。在这之前需要到 <a href="https://github.com/apps/utterances">utterances app</a> 申请一下，这样 utterances 才有权限访问你的仓库。</p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>找到 Next 主题的配置文件 _config.yml，配置随便你添加到哪里。你可以放在文件末尾或者可以和其他评论模块配置放在一块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">utterance:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo</span>: #仓库名字</span><br><span class="line">  <span class="attr">theme</span>: #主题</span><br><span class="line">  issue-term: #映射配置</span><br></pre></td></tr></table></figure><p>评论主题的 theme 选项如下:</p><blockquote><ul><li>github-light</li></ul></blockquote><ul><li>github-dark</li><li>github-dark-orange</li><li>icy-dark</li><li>dark-blue</li><li>photon-dark</li></ul><p>评论 issue-term 映射配置选项如下：</p><blockquote><ul><li>pathname</li></ul></blockquote><ul><li>url</li><li>title</li><li>og:title</li><li>issue-number</li><li>specific-term</li></ul><h3 id="引入-Utterance-插件"><a href="#引入-Utterance-插件" class="headerlink" title="引入 Utterance 插件"></a>引入 Utterance 插件</h3><p>在 <code>_third-party\comments</code> 文件夹下创建 <code>utterance.swig</code> 文件。写入代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    (function() &#123;</span><br><span class="line">        // 匿名函数，防止污染全局变量</span><br><span class="line">        var utterances = document.createElement(&#x27;script&#x27;);</span><br><span class="line">        utterances.type = &#x27;text/javascript&#x27;;</span><br><span class="line">        utterances.async = true;</span><br><span class="line">        utterances.setAttribute(&#x27;issue-term&#x27;,&#x27;&#123;&#123; theme.utterance.issue-item &#125;&#125;&#x27;)</span><br><span class="line">        utterances.setAttribute(&#x27;theme&#x27;,&#x27;&#123;&#123; themm.utterance.theme &#125;&#125;&#x27;)</span><br><span class="line">        utterances.setAttribute(&#x27;repo&#x27;,&#x27;&#123;&#123; theme.utterance.repo &#125;&#125;&#x27;)</span><br><span class="line">        utterances.crossorigin = &#x27;anonymous&#x27;;</span><br><span class="line">        utterances.src = &#x27;https://utteranc.es/client.js&#x27;;</span><br><span class="line">        // content 是要插入评论的地方</span><br><span class="line">        document.getElementById(&#x27;gitment-container&#x27;).appendChild(utterances);</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="增加-comment-样式"><a href="#增加-comment-样式" class="headerlink" title="增加 comment 样式"></a>增加 comment 样式</h3><p>找到 <code>_partials\comments.swig</code> 然后增加下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elif theme.utterance.enable %&#125;</span><br><span class="line">     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comments&quot;</span> id=<span class="string">&quot;comments&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitment-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>还需要在 <code>_third-party\comments\index.swig</code> 添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elif theme.utterance.enable %&#125;</span><br><span class="line">    &#123;% include <span class="string">&#x27;utterance.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure><p>以上就是整个配置过程。如果有任何问题可以在评论区留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;博客最近切换到了 &lt;code&gt;hexo&lt;/code&gt; 博客, 目前用起来感觉很方便。很喜欢 markdown 写作。当然利用 Github </summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="hexo" scheme="https://jaguarjack.github.io/tags/hexo/"/>
    
    <category term="next" scheme="https://jaguarjack.github.io/tags/next/"/>
    
    <category term="评论" scheme="https://jaguarjack.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 修改 dingo 异常处理默认 Http Code</title>
    <link href="https://jaguarjack.github.io/2019/05/05/dingo-exception/"/>
    <id>https://jaguarjack.github.io/2019/05/05/dingo-exception/</id>
    <published>2019-05-05T10:51:47.000Z</published>
    <updated>2021-06-16T01:05:39.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>公司需要将老项目迁移, 由于之前的错误返回都是不规范的, 对于错误处理都是直接返回 <strong>200</strong> http code。大量的使用这样的返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response()-&gt;json(<span class="number">200</span>, [<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$msg</span>])</span><br></pre></td></tr></table></figure><p>已经没有办法更改了, 客户端都是根据接口的的业务代码 <code>code</code> 来判断的。但是在新的项目中严格规范使用异常抛出, 但是异常抛出后 http code 返回的是 <code>500</code>。导致测试通过不了, 没有办法只能修改。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用了异常抛出业务错误, 在 <code>laravel</code> 框架中, 异常都是统一处理的, 在 <code>App\Exceptions\Handle</code> 里面进行了全局处理。对于框架抛出的异常, 全部由它来处理。但是当你想要在 <code>Handle</code> 里面修改处理的时候, 你会发现并不会有任何效果。到底什么原因导致的呢？</p><p>在入口文件可以看到这么一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在这里进行了全局的异常服务注册, 这里先不关注异常在哪里处理的。既然实际是没有通过 Hanle 类处理, 猜测这里服务可能被 Dingo 重新注册过了。带着这个想法可以看一下 Dingo 的服务注册。在 <code>Dingo\Api\Provider\DingoServiceProvider</code> 看到了异常注册</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerExceptionHandler</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;api.exception&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ExceptionHandler(<span class="variable">$app</span>[<span class="string">&#x27;Illuminate\Contracts\Debug\ExceptionHandler&#x27;</span>], <span class="keyword">$this</span>-&gt;config(<span class="string">&#x27;errorFormat&#x27;</span>), <span class="keyword">$this</span>-&gt;config(<span class="string">&#x27;debug&#x27;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里肯定会有疑问了, 这个单例模式也没有重新注册 <code>Illuminate\Contracts\Debug\ExceptionHandler::class</code> 这个类啊？没错, 因为 Dingo 接管了路由, 你实际使用的 <code>\Dingo\Api\Routing\Router::class</code>, 所以 Dispatch 的会由 Dingo 来执行。这里就不细说了。有兴趣的可以看一下 Dingo 的处理。<br>Dispatch 处理可以在 <code>Dingo\Api\Dispatcher</code>里面找到。来看一下代码处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">InternalRequest <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;routeStack[] = <span class="keyword">$this</span>-&gt;router-&gt;getCurrentRoute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;clearCachedFacadeInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;container-&gt;instance(<span class="string">&#x27;request&#x27;</span>, <span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$response</span> = <span class="keyword">$this</span>-&gt;router-&gt;dispatch(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (! <span class="variable">$response</span>-&gt;isSuccessful() &amp;&amp; ! <span class="variable">$response</span>-&gt;isRedirection()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalHttpException(<span class="variable">$response</span>);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (! <span class="keyword">$this</span>-&gt;raw) &#123;</span><br><span class="line">                <span class="variable">$response</span> = <span class="variable">$response</span>-&gt;getOriginalContent();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 主要看这里的 exception 处理 这里就是接管的异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (HttpExceptionInterface <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;refreshRequestStack();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$exception</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;refreshRequestStack();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先不用管这个接口类的异常, 来看看 Dingo 的 Handle 如何处理的。下面会提到处理为何这里是接口, 还有该如何修改。</p><p>你需要从 render 方法来是查找, 你最终会看到, 过程就不细讲了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getExceptionStatusCode</span>(<span class="params"><span class="built_in">Exception</span> <span class="variable">$exception</span>, <span class="variable">$defaultStatusCode</span> = <span class="number">500</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable">$exception</span> <span class="keyword">instanceof</span> HttpExceptionInterface) ? <span class="variable">$exception</span>-&gt;getStatusCode() : <span class="variable">$defaultStatusCode</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就和上面的接口类对应了, 为什么返回 500 呢？看这段代码已经一目了然了。如果不是实现了 <code>HttpExceptionInterface</code> 的异常类, <code>StatusCode</code> 都是返回 500。所以需要做的就很简单了, 实现 <code>HttpExceptionInterface</code> 就可以了。简单实现:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> \<span class="title">Exception</span>  <span class="keyword">implements</span> <span class="title">HttpExceptionInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns response headers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array Response headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHeaders</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是一个 exception 基类, 需要的就是继承就可以了。这样就可以解决该问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;公司需要将老项目迁移, 由于之前的错误返回都是不规范的, 对于错误处理都是直接返回 &lt;strong&gt;200&lt;/strong&gt; http co</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="laravel" scheme="https://jaguarjack.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>cURL 报错 error 60 SSL certificate problem unable to get local issuer certificate</title>
    <link href="https://jaguarjack.github.io/2019/05/04/curl-error-60/"/>
    <id>https://jaguarjack.github.io/2019/05/04/curl-error-60/</id>
    <published>2019-05-03T18:07:45.000Z</published>
    <updated>2021-06-16T01:05:39.114Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 Laravel 框架的时候, 开发第三方服务的时候, 由于是本地开发, 所以 Https 回调的时候回出现这样的错误。那么该如何解决呢？ 具体信息如下</p><blockquote><p>cURL error 60: SSL certificate problem: unable to get local issuer certificate (see http: curl.haxx.se libcurl c libcurl errors.html)</p></blockquote><h2 id="为什么会出现这种错误？"><a href="#为什么会出现这种错误？" class="headerlink" title="为什么会出现这种错误？"></a>为什么会出现这种错误？</h2><p>由于敏感信息的传输通常在数字证书下进行。 该证书将有助于向收件人确认发件人实际上是他们声称的人。 数字证书由证书机构颁发。</p><p>当数字证书应用于服务器时，服务器上会安装可信证书颁发机构及其根证书的列表。 通过常规 HTTPS 进行的事务将恢复到此列表以进行通信。 但是，CURL 不遵守规则。 您需要告诉 <code>Curl</code> 有关 <code>Ca</code> 根证书的信息。</p><h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h2><p>要解决该错误，您需要定义 <code>CURL</code> 证书颁发机构信息路径<br>要做到这一点，在此处下载最新的 <code>curl</code> <a href="https%EF%BC%9A//curl.haxx.se/ca/cacert.pem"><strong>认可证书</strong></a>,<br>将 <code>cacert.pem</code> 文件保存在可到达的目标中。<br>然后，在 <code>php.ini</code> 文件中，向下滚动到找到 [curl] 的位置。<br>您应该看到注释掉了 <code>CURLOPT_CAINFO</code> 选项。 取消注释并将其指向 <code>cacert.pem</code> 文件。 你应该有这样的一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl.cainfo =“证书路径\cacert.pem”</span><br></pre></td></tr></table></figure><p>保存并关闭 <code>php.ini</code>。 重新启动您的网络服务器并再次尝试您的请求</p><p>如果未设置正确的位置，则会出现 <code>CURL 77</code> 错误。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用 Laravel 框架的时候, 开发第三方服务的时候, 由于是本地开发, 所以 Https 回调的时候回出现这样的错误。那么该如何解决呢？ 具体信息如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cURL error 60: SSL certificate proble</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="curl" scheme="https://jaguarjack.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>mac 安装 man 中文手册</title>
    <link href="https://jaguarjack.github.io/2019/04/28/mac-install-man/"/>
    <id>https://jaguarjack.github.io/2019/04/28/mac-install-man/</id>
    <published>2019-04-28T06:25:41.000Z</published>
    <updated>2021-06-16T01:05:39.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-man-中文手册"><a href="#安装-man-中文手册" class="headerlink" title="安装 man 中文手册"></a>安装 man 中文手册</h2><p>在使用 mac 或者 linux 的时候，需要用到命令，而大量的命令含有大量 options，一般很难记住，使用 <code>man</code> 可以查看这些命令的 options，但对于英语薄弱的人来说，例如我，看起来还是有一定的困难，所以需要安装以下中文手册。<br>准备前，我们需要安装两个 package，前提你是使用了 brew 管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; brew install automake</span><br><span class="line">&gt; brew install opencc</span><br></pre></td></tr></table></figure><p>然后需要下载中文包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; git clone  https://github.com/man-pages-zh/manpages-zh</span><br><span class="line">&gt; cd manpages-zh</span><br><span class="line">&gt; autoreconf --install --force</span><br><span class="line">&gt;  ./configure</span><br><span class="line">&gt; sudo make</span><br><span class="line">&gt; sudo make install</span><br></pre></td></tr></table></figure><p>等待编译完成之后，我们还需要配置一些东西。如果你之前没有更新 groff，需要先更新 groff，不然会出现乱码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; brew install groff </span><br><span class="line">&gt; echo &quot;MANPATH /usr/local/share/man/zh_CN&quot; &gt;&gt; /etc/man.conf</span><br><span class="line">&gt; echo &quot;NROFF preconv -e UTF8 | /usr/local/bin/nroff -Tutf8 -mandoc -c&quot; &gt;&gt; /etc/man.conf</span><br><span class="line">&gt; export alias cman=&#x27;man -M /usr/local/share/man/zh_CN&#x27; // 你可以加入到环境变量里</span><br><span class="line">&gt; cman ls </span><br></pre></td></tr></table></figure><p>这样就可以愉快的使用 man 中文手册啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装-man-中文手册&quot;&gt;&lt;a href=&quot;#安装-man-中文手册&quot; class=&quot;headerlink&quot; title=&quot;安装 man 中文手册&quot;&gt;&lt;/a&gt;安装 man 中文手册&lt;/h2&gt;&lt;p&gt;在使用 mac 或者 linux 的时候，需要用到命令，而大量的命令</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="macos" scheme="https://jaguarjack.github.io/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>详解 Linux 文件权限</title>
    <link href="https://jaguarjack.github.io/2019/04/23/linux-file-mode/"/>
    <id>https://jaguarjack.github.io/2019/04/23/linux-file-mode/</id>
    <published>2019-04-23T07:36:59.000Z</published>
    <updated>2021-06-16T01:05:39.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-文件权限"><a href="#Linux-文件权限" class="headerlink" title="Linux 文件权限"></a>Linux 文件权限</h2><p>在深入了解之前，先来理解一下文件权限的基本信息。首先创建一个信息的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; touch new_file</span><br><span class="line">&gt; ll new_file</span><br><span class="line">&gt; -rw-r--r-- 1 root root 0 4月  23 22:59 new_file</span><br></pre></td></tr></table></figure><p>文件 new_file 拥有下面三组权限:</p><blockquote><p>rw- :文件的属主，登陆用户的权限 r w 分别是读写</p><p>r– : 文件属主的所属组的权限 r 读</p><p>r–: 其他用户的权限 r 读</p></blockquote><p>当然还有一个 <code>x</code> 可执行权限这里没有，可以通过 <code>chmod</code> 命令来增加。这个后面再说。我们先来说说文件权限的由来，<code>touch</code> 命令之后的默认权限是如何来的。要知道首先要知道有 <code>umask</code> 的存在。通过 <code>umask</code> 命令可以获取默认值。这个值很有用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; umask</span><br><span class="line">&gt; 0022 // 这是我机器上面的值</span><br></pre></td></tr></table></figure><p>要了解这个 umask 的是如何工作的，首先要理解一下八进制模式的安全性设置。八进制模式的安全设置先获取这三个 rwx 权限的值，然后将其转换为三位二进制值，用一个八进制值来表示。在这个二进制表示中，每个位置代表一个二进制位。例如唯一读权限 r– 转换成二进制就是 100, 那么代表的八进制就是 4。<br>如下表表示的这样：</p><table><thead><tr><th>权限</th><th>二进制</th><th>八进制</th><th>描述</th></tr></thead><tbody><tr><td>—</td><td>000</td><td>0</td><td>没有任何权限</td></tr><tr><td>–x</td><td>0001</td><td>1</td><td>只有可执行权限</td></tr><tr><td>-w-</td><td>010</td><td>2</td><td>只有可写权限</td></tr><tr><td>-wx</td><td>011</td><td>3</td><td>只有可写可执行权限</td></tr><tr><td>r–</td><td>100</td><td>4</td><td>只有可读权限</td></tr><tr><td>r-x</td><td>101</td><td>5</td><td>只有可读可执行权限</td></tr><tr><td>rw-</td><td>110</td><td>6</td><td>只有可读可写权限</td></tr><tr><td>rwx</td><td>111</td><td>7</td><td>可读可写权限可执行</td></tr></tbody></table><p>当了解对应权限以及八进制值之后，看看上面的 new_file 拥有权限是 644。那么这里有点困惑了，这个值是如何得来的呢。 <code>umask</code> 的 <code>0022</code> 有什么意义呢？其实这个值只是个掩码。他会屏蔽掉不像授予该安全级别的权限。对于文件来说，全权限是 <code>666</code>，减去 <code>umask</code> 的值就是新创建文件的权限。 644 正是我们所期望的那样，默认屏蔽了文件所属组和其他用户 w 权限。这里说明一下文件夹的全权限是 777。如果你想屏蔽更多的权限，可以修改 umask 的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; umask 026</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux-文件权限&quot;&gt;&lt;a href=&quot;#Linux-文件权限&quot; class=&quot;headerlink&quot; title=&quot;Linux 文件权限&quot;&gt;&lt;/a&gt;Linux 文件权限&lt;/h2&gt;&lt;p&gt;在深入了解之前，先来理解一下文件权限的基本信息。首先创建一个信息的文件&lt;/p</summary>
      
    
    
    
    <category term="服务器运维" scheme="https://jaguarjack.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://jaguarjack.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac SSH 连接出现 Host key verification failed 错误解决</title>
    <link href="https://jaguarjack.github.io/2019/04/19/mac-vertify-failed/"/>
    <id>https://jaguarjack.github.io/2019/04/19/mac-vertify-failed/</id>
    <published>2019-04-18T21:07:56.000Z</published>
    <updated>2021-06-16T01:05:39.129Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用 <a href="javascript:;"><strong>ssh</strong></a> 链接 <a href="javascript:;"><strong>linux</strong></a> 主机时，可能出现 “<a href="javascript:;"><strong>Host</strong></a> <a href="javascript:;"><strong>key</strong></a> verification failed.“ 的提示，ssh 连接不成功。<br>可能的提示信息如下:</p><blockquote><p>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that the RSA host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>23:00:20:83:de:02:95:f1:e3:34:be:57:3f:cf:2c:e7.<br>Please contact your system administrator.<br>Add correct host key in /home/xahria/.ssh/known_hosts to get rid of this message.<br>Offending key in /home/xahria/.ssh/known_hosts:8<br>RSA host key for localhost has changed and you have requested strict checking.<br>Host key verification failed.</p></blockquote><p>网上很多的解决方案是：<code>vi ~/.ssh/known_hosts </code> 删除与想要连接的主机相关的行；或者直接删除<code>known_hosts</code> 这个文件。 当然这个方案也是可行的，但并非解决问题的根本办法，因为继续使用，今后还会出现这样的情况，还得再删除。<br>下面简单讲一下这个问题的原理和比较长久的解决方案。<br>用<code>OpenSSH</code>的人都知ssh会把你每个你访问过计算机的公钥(public key)都记录在 <code>~/.ssh/known_hosts</code>。当下次访问相同计算机时，<code>OpenSSH</code> 会核对公钥。如果公钥不同，<code>OpenSSH </code>会发出警告，避免你受到DNS Hijack之类的攻击。<br>SSH 对主机的 public_key 的检查等级是根据 <code>StrictHostKeyChecking</code> 变量来配置的。默认情况下，<code>StrictHostKeyChecking=ask</code>。简单所下它的三种配置值：</p><p>1.<code>StrictHostKeyChecking=no </code>最不安全的级别，当然也没有那么多烦人的提示了，相对安全的内网<a href="javascript:;"><strong>测试</strong></a>时建议使用。如果连接<a href="javascript:;"><strong>server</strong></a>的 key 在本地不存在，那么就自动添加到文件中（默认是known_hosts），并且给出一个警告。</p><p>2.<code>StrictHostKeyChecking=ask</code>  默认的级别，就是出现刚才的提示了。如果连接和key不匹配，给出提示，并拒绝登录。</p><p>3.<code>StrictHostKeyChecking=yes</code>  最安全的级别，如果连接与key不匹配，就拒绝连接，不会提示详细信息。</p><p>对于我来说，在内网的进行的一些测试，为了方便，选择最低的安全级别。在 .ssh/config（或者 /etc/ssh/ssh_config ）中配置：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> StrictHostKeyChecking no</span><br><span class="line">UserKnownHostsFile /dev/null</span><br></pre></td></tr></table></figure></p><blockquote><p>（注：这里为了简便，将 knownhostfile 设为 /dev/null，就不保存在 known_hosts 中了）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们使用 &lt;a href=&quot;javascript:;&quot;&gt;&lt;strong&gt;ssh&lt;/strong&gt;&lt;/a&gt; 链接 &lt;a href=&quot;javascript:;&quot;&gt;&lt;strong&gt;linux&lt;/strong&gt;&lt;/a&gt; 主机时，可能出现 “&lt;a href=&quot;javascript:;</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="macos" scheme="https://jaguarjack.github.io/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>Go 如何实现兼容 PHP 的密码加密解密</title>
    <link href="https://jaguarjack.github.io/2019/04/17/go-to-php-passwordhash/"/>
    <id>https://jaguarjack.github.io/2019/04/17/go-to-php-passwordhash/</id>
    <published>2019-04-16T21:28:53.000Z</published>
    <updated>2021-06-16T01:05:39.121Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在迁移自己的小项目，项目之前是基于 <strong>Laravel5.5</strong> 开发的。整个用户登陆也是基于框架的 Auth 包认证的。其中用户密码这块也是用到了 <code>PHP</code> 内置的函数 <code>password_hash</code>，用它进行密码加密。而且 PHP 默认使用的 PASSWORD_BCRYPT 算法。在使用 Go 的迁移过程中需要认证密码，还需要兼容 <code>password_hash</code>, 所以就把这个过程记录下来。使用下面的例子来说明如何使用 GO <a href="https://godoc.org/golang.org/x/crypto/bcrypt">bcrypt</a> 包来对你的密码进行 hash 和 salt 加密</p><p>对于这个例子，我将创建一个控制台应用程序，用于演示如何获取用户输入的密码并使用它生成 salt 哈希值。 完成此操作后，我将通过比较密码与其散列版本来验证密码是否正确。</p><h3 id="获取用户输入的密码"><a href="#获取用户输入的密码" class="headerlink" title="获取用户输入的密码"></a>获取用户输入的密码</h3><p>开始我们先创建一个可以在控制台读取用户输入的的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func getPwd() []byte &#123;</span><br><span class="line">    fmt.Println(&quot;Enter a password&quot;)</span><br><span class="line">    var pwd string</span><br><span class="line"></span><br><span class="line">    // 读取用户输入</span><br><span class="line">    _, err := fmt.Scan(&amp;pwd)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    return []byte(pwd)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">### Hash &amp; Salt 用户的密码</span><br><span class="line">现在我们可以使用 Go 的 [bcrypt](https://godoc.org/golang.org/x/crypto/bcrypt) 包提供的`GenerateFromPassword(password []byte, cost int)([]byte, error)`方法对用户的密码进行 hash 和 salt 加密了。</span><br><span class="line">&gt; GenerateFromPassword 方法以给定 cost 值返回密码的 Bcrypt 算法的 Hash 值，如果提供的 cost 值小于 Mincost 的话，将会默认使用 DefaultCost 代替</span><br><span class="line">&gt; </span><br><span class="line">使用 `GenerateFromPassword` 函数的一个优势就是我们不需要自己来编写函数来生成 Salt，因为它会为我们自动生成一个 Salt。</span><br><span class="line"></span><br><span class="line">下面的函数使用 `GenerateFromPassword` 生成 salted 哈希值，该哈希值作为字节切片返回。 然后我们将字节切片作为字符串返回，以便我们可以将 salted 哈希存储在数据库中作为用户密码。</span><br></pre></td></tr></table></figure><p>func hashAndSalt(pwd []byte) string {<br>    hash, err := bcrypt.GenerateFromPassword(pwd, bcrypt.MinCost)<br>    if err != nil {<br>        log.Println(err)<br>    }<br>    return string(hash)<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### 目前我们做了什么</span><br><span class="line">到目前为止，我们已经创建了一个接受来自控制台的用户输入并将其作为字节切片返回的函数。 然后,</span><br><span class="line">我们再创建一个可以接收用户输入并返回  salted 哈希值的函数。下面就是代码事例。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>package main</p><p>import (<br>    “fmt”<br>    “log”<br>    “golang.org/x/crypto/bcrypt”<br>)</p><p>func main() {<br>   for {<br>        pwd := getPwd()<br>        hash := hashAndSalt(pwd)<br>        fmt.Println(“Salted Hash”, pwd)<br>     }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果你运行上面的代码，将会得到下面的结果</span><br></pre></td></tr></table></figure><blockquote><p>$ Enter a password<br>$ foobar<br>Salted Hash $2a$10$………..</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这里需要的注意的是我使用 for 循环调用函数，直到我强制停止它。对于那些不熟悉 GO 的人来讲，这个就和其他语言的 `while (true)&#123;&#125;`是一样的效果。</span><br><span class="line">### 验证密码</span><br><span class="line">最后一件事儿就是需要验证密码的正确性来登陆我们的系统，我们可以使用 [bcrypt](https://godoc.org/golang.org/x/crypto/bcrypt) 包提供的`CompareHashAndPassword(hashedPassword, password []byte) error`函数</span><br><span class="line"></span><br><span class="line">&gt; CompareHashAndPassword 将 bcrypt 哈希密码与其纯文本进行比较。 成功时返回nil，失败时返回错误</span><br><span class="line">&gt; </span><br><span class="line">我们使用`CompareHashAndPassword`函数来创建另一个返回 bool 值的函数让我们知道密码是否匹配。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>func comparePasswords(hashedPwd string, plainPwd []byte) bool {</p><pre><code>byteHash := []byte(hashedPwd)err := bcrypt.CompareHashAndPassword(byteHash, plainPwd)\if err != nil &#123;    log.Println(err)    return false&#125;return true</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 更新 Main 函数</span><br><span class="line">我们现在可以更新我们的主要功能，以便我们能够输入密码，获取其盐渍哈希，然后再次输入密码，并查明我们的第二个密码是否与我们输入的第一个密码相匹配。</span><br><span class="line">我们现在修改一个 main 函数，当我们输入密码的时候，获取 salted  哈希值，然后再次输入密码，来检查我们的密码是否匹配。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>func main() {<br>    for {<br>        pwd := getPwd()<br>        hash := hashAndSalt(pwd)<br>        pwd2 := getPwd()<br>        pwdMatch := comparePasswords(hash, pwd2)<br>        fmt.Println(“Passwords Match?”, pwd)<br>    }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 全部代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>package main</p><p>import (<br>    “fmt”<br>    “log”<br>    “golang.org/x/crypto/bcrypt”<br>)</p><p>func main() {<br>    for {<br>       // 输入密码 获取 hash 值<br>        pwd := getPwd()<br>        hash := hashAndSalt(pwd)<br>       // 再次输入密码验证<br>        pwd2 := getPwd()<br>        pwdMatch := comparePasswords(hash, pwd2)<br>        fmt.Println(“Passwords Match?”, pwd)<br>    }<br>}</p><p>func getPwd() []byte {<br>    fmt.Println(“Enter a password”)<br>    var pwd string<br>    _, err := fmt.Scan(&amp;pwd)<br>    if err != nil {<br>        log.Println(err)<br>    }<br>    return []byte(pwd)<br>}</p><p>func hashAndSalt(pwd []byte) string {<br>    hash, err := bcrypt.GenerateFromPassword(pwd, bcrypt.MinCost)<br>    if err != nil {<br>        log.Println(err)<br>    }<br>    return string(hash)<br>}</p><p>func comparePasswords(hashedPwd string, plainPwd []byte) bool {<br>    byteHash := []byte(hashedPwd)</p><pre><code>err := bcrypt.CompareHashAndPassword(byteHash, plainPwd)if err != nil &#123;    log.Println(err)    return false&#125;return true</code></pre><p>}</p><pre><code>以上便是 GO 转 php 的加密函数的过程，如果有任何错误或者不当的地方欢迎进行改进。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近正在迁移自己的小项目，项目之前是基于 &lt;strong&gt;Laravel5.5&lt;/strong&gt; 开发的。整个用户登陆也是基于框架的 Auth 包认证的。其中用户密码这块也是用到了 &lt;code&gt;PHP&lt;/code&gt; 内置的函数 &lt;code&gt;password_hash&lt;/co</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="https://jaguarjack.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Jwtauth 自定义认证头信息</title>
    <link href="https://jaguarjack.github.io/2019/04/11/jwtauth-header/"/>
    <id>https://jaguarjack.github.io/2019/04/11/jwtauth-header/</id>
    <published>2019-04-10T21:30:35.000Z</published>
    <updated>2021-06-16T01:05:39.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义认证头"><a href="#自定义认证头" class="headerlink" title="自定义认证头"></a>自定义认证头</h2><p>项目使用的<code>tymon/jwt-auth</code>包作为 <code>token</code> 的认证，过程中需要迁移项目，因为之前公司的 <code>token</code> 头部使用自定义的，并且他们还修改了包的头信息。就是下面头部信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class AuthHeaders implements ParserContract</span><br><span class="line">&#123;</span><br><span class="line">// 下面这两处就是被修改的</span><br><span class="line">    protected $header = &#x27;authorization&#x27;; </span><br><span class="line"></span><br><span class="line">    protected $prefix = &#x27;bearer&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迁移项目过程了，因为拉取了新的包，所以还要去动包的信息，这是极其不合理的行为。所以就在包中尝试找到了更好的解决办法。如果在项目迁移过程中遇到了类似的问题该如何去做呢？这里只提供了我能想到的解决办法。需要在 <code>AppServiceProvider</code> 中加入该方法就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected function setAuthHeader()</span><br><span class="line">&#123;</span><br><span class="line">    $chain = $this-&gt;app[&#x27;tymon.jwt.parser&#x27;]-&gt;getChain();</span><br><span class="line"></span><br><span class="line">    $chain[0] = $chain[0]-&gt;setHeaderPrefix(&#x27;项目的 token 前缀&#x27;)-&gt;setHeaderName(&#x27;项目的头信息 key&#x27;);</span><br><span class="line"></span><br><span class="line">    $this-&gt;app[&#x27;tymon.jwt.parser&#x27;]-&gt;setChain($chain);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你有更好的办法可以提供，欢迎留言或者改进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义认证头&quot;&gt;&lt;a href=&quot;#自定义认证头&quot; class=&quot;headerlink&quot; title=&quot;自定义认证头&quot;&gt;&lt;/a&gt;自定义认证头&lt;/h2&gt;&lt;p&gt;项目使用的&lt;code&gt;tymon/jwt-auth&lt;/code&gt;包作为 &lt;code&gt;token&lt;/code&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="laravel" scheme="https://jaguarjack.github.io/tags/laravel/"/>
    
    <category term="jwt" scheme="https://jaguarjack.github.io/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>Go Modules 详解使用</title>
    <link href="https://jaguarjack.github.io/2019/04/09/go-module/"/>
    <id>https://jaguarjack.github.io/2019/04/09/go-module/</id>
    <published>2019-04-09T00:00:00.000Z</published>
    <updated>2021-06-16T01:05:39.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>自从 <code>Go</code> 官方从去年推出 1.11 之后，增加新的依赖管理模块并且更加易于管理项目中所需要的模块。模块是存储在文件树中的 Go 包的集合，其根目录中包含 go.mod 文件。 go.mod 文件定义了模块的模块路径，它也是用于根目录的导入路径，以及它的依赖性要求。每个依赖性要求都被写为模块路径和特定语义版本。</p><p>从 Go 1.11 开始，Go 允许在 $GOPATH/src 外的任何目录下使用 go.mod 创建项目。在 $GOPATH/src 中，为了兼容性，Go 命令仍然在旧的 GOPATH 模式下运行。从 Go 1.13 开始，模块模式将成为默认模式。</p><p>本文将介绍使用模块开发 Go 代码时出现的一系列常见操作：</p><ul><li>创建一个新模块。</li><li>添加依赖项。</li><li>升级依赖项。</li><li>删除未使用的依赖项。</li></ul><p>下面使用的案例都是以 <code>GIN</code> 模块为例。<br>在这之前呢，需要先设置一些环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io // 设置代理</span><br></pre></td></tr></table></figure><h3 id="创建一个新模块"><a href="#创建一个新模块" class="headerlink" title="创建一个新模块"></a>创建一个新模块</h3><p>你可以在   $GOPATH/src 之外的任何地方创建一个新的目录。比如：</p><blockquote><p>mkdir backend &amp;&amp; cd backend</p></blockquote><p>然后初始化 <code>go mod init backend</code>，成功之后你会发现目录下会生成一个 <code>go.mod</code> 文件.</p><blockquote><p>$ cat go.mod </p><p>内容如下</p><p>module backend</p><p> go 1.12</p></blockquote><h3 id="添加依赖项"><a href="#添加依赖项" class="headerlink" title="添加依赖项"></a>添加依赖项</h3><p>创建一个文件 main.go 然后加入以下代码，这里直接 import 了 gin 的依赖包。</p><blockquote><p>vim main.go</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go build 之后，会在 go.mod 引入所需要的依赖包。之后再来看看 go.mod 文件的情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module backend</span><br><span class="line"></span><br><span class="line">go 1.12</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">github.com/gin-contrib/sse v0.0.0-20190301062529-5545eab6dad3 // indirect</span><br><span class="line">github.com/gin-gonic/gin v1.3.0</span><br><span class="line">github.com/golang/protobuf v1.3.1 // indirect</span><br><span class="line">github.com/mattn/go-isatty v0.0.7 // indirect</span><br><span class="line">github.com/ugorji/go v1.1.4 // indirect</span><br><span class="line">gopkg.in/go-playground/validator.v8 v8.18.2 // indirect</span><br><span class="line">gopkg.in/yaml.v2 v2.2.2 // indirect</span><br></pre></td></tr></table></figure><p>require 就是 gin 框架所需要的所有依赖包 并且在每个依赖包的后面已经表明了版本号</p><h3 id="升级依赖项"><a href="#升级依赖项" class="headerlink" title="升级依赖项"></a>升级依赖项</h3><p>首先我们需要查看以下我们使用到的依赖列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; go list -m all</span><br><span class="line">// 你会看到所有项目使用的依赖包</span><br><span class="line">backend</span><br><span class="line">github.com/gin-contrib/sse v0.0.0-20190301062529-5545eab6dad3</span><br><span class="line">github.com/gin-gonic/gin v1.3.0</span><br><span class="line">github.com/golang/protobuf v1.3.1</span><br><span class="line">github.com/mattn/go-isatty v0.0.7</span><br><span class="line">github.com/ugorji/go v1.1.4</span><br><span class="line">golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223</span><br><span class="line">gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405</span><br><span class="line">gopkg.in/go-playground/validator.v8 v8.18.2</span><br><span class="line">gopkg.in/yaml.v2 v2.2.2</span><br></pre></td></tr></table></figure><p>因为这里使用的是最新的版本，无法升级，所以这里给出一个回退的例子。将 GIN 框架的版本回退到上个版本。这里需要使用一个命令查看依赖的版本历史。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; go list -m -versions github.com/gin-gonic/gin</span><br><span class="line">// 将会列出 Gin 版本历史</span><br><span class="line">github.com/gin-gonic/gin v1.1.1 v1.1.2 v1.1.3 v1.1.4 v1.3.0</span><br></pre></td></tr></table></figure><p>将版本更新到上个版本，这里只是个演示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; go get github.com/gin-gonic/gin@v1.1.4 // 只需要在依赖后面加上 @version 就可以了</span><br><span class="line">&gt; go list -m all</span><br><span class="line">// 看到了版本变化</span><br><span class="line">github.com/gin-gonic/gin v1.1.4</span><br></pre></td></tr></table></figure><p>或者可以使用 <code>go mod</code>来进行版本的切换, 这样就需要两个步骤了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; go mod edit -require=<span class="string">&quot;github.com/gin-gonic/gin@v1.1.4&quot;</span> // 修改 go.mod 文件</span><br><span class="line">&gt; go tidy //下载更新依赖</span><br></pre></td></tr></table></figure><p><code>go.tidy</code> 会自动清理掉不需要的依赖项，同时可以将依赖项更新到当前版本</p><p>使用起来这是一个很简单过程，只需要几个命令，你便可以知道依赖的版本信息，以及自由选择安装的版本，一切都变得这么简单。</p><h3 id="删除未使用的依赖项"><a href="#删除未使用的依赖项" class="headerlink" title="删除未使用的依赖项"></a>删除未使用的依赖项</h3><p>如果你在项目过程需要移除一些不需要的依赖，可以使用下面的命令来执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;go mod tidy</span><br></pre></td></tr></table></figure><p>更多关于 go mod 的使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ go mod</span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">        download    download modules to local cache</span><br><span class="line">        edit        edit go.mod from tools or scripts</span><br><span class="line">        graph       print module requirement graph</span><br><span class="line">        init        initialize new module in current directory</span><br><span class="line">        tidy        add missing and remove unused modules</span><br><span class="line">        vendor      make vendored copy of dependencies</span><br><span class="line">        verify      verify dependencies have expected content</span><br><span class="line">        why         explain why packages or modules are needed</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Go Module 是 Go 依赖管理的未来。 目前只有 1.11 和 1.12 版本支持该功能，介绍了 Go 依赖管理的功能。更多的功能会在以后补充。也欢迎补充完善。最后如果你是使用 <code>Goland</code>, 请移步这里<a href="https://blog.jetbrains.com/go/2019/01/22/working-with-go-modules/">Working with Go Modules</a>阅读关于使用 Modules 开发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h2&gt;&lt;p&gt;自从 &lt;code&gt;Go&lt;/code&gt; 官方从去年推出 1.11 之后，增加新的依赖管理模块并且更加易于管理项</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="https://jaguarjack.github.io/tags/go/"/>
    
    <category term="go modules" scheme="https://jaguarjack.github.io/tags/go-modules/"/>
    
  </entry>
  
  <entry>
    <title>Go 陷阱之 for 循环迭代变量</title>
    <link href="https://jaguarjack.github.io/2019/04/09/go-for-trap/"/>
    <id>https://jaguarjack.github.io/2019/04/09/go-for-trap/</id>
    <published>2019-04-08T20:26:51.000Z</published>
    <updated>2021-06-16T01:05:39.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="捕获迭代变量"><a href="#捕获迭代变量" class="headerlink" title="捕获迭代变量"></a>捕获迭代变量</h2><p>这是在学习 <strong>Go 程序设计</strong> 中遇到的一个比较重要的一个警告。这是个 Go 语言的词法作用域规则的陷阱。看完之后感觉是真的一个比较让人疑惑困惑的地方。所以特地记录一下。由标题就可以知道了，迭代变量，肯定是在 <code>for</code> 中遇到的问题。来看一个简单的例子说明一下这个问题所在。</p><p>看一段简单的代码， 首先是错误的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sli := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> sli &#123;</span><br><span class="line">fmt.Println(&amp;v)</span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(v * v) <span class="comment">// 直接打印结果</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, val  := <span class="keyword">range</span> slice &#123;</span><br><span class="line">val()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 25 25 25 25 25</span></span><br></pre></td></tr></table></figure><p>你可能会很奇怪为什么会出现这种情况, 结果不应该是 <code>1, 4, 9, 16, 25</code> 吗？其实原因是循环变量的作用域的规则限制。在上面的程序中，<code>v</code> 在 for 循环引进的一个块作用域内进行声明。在循环里创建的所有函数变量<code>共享相同的变量，就是一个可访问的存储位置，而不是固定的值</code>。(你会惊奇的发现 <code>&amp;v</code> 的内存地址是一样的)</p><p>模拟一下实际的情况，假设 v 变量的地址在 0x12345678 上， for 循环在迭代过程中，所有变量值都是在这地址上迭代的。当最后调用匿名函数的时候，取值也是在这块地址上。所以最后输出的结果都是迭代的最后一个值。至少在 Go 语言中是不用质疑的。这里也是一个陷阱，如果你不清楚的话，肯定会遇到坑。那个该如何修改呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sli := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> sli &#123;</span><br><span class="line">    temp := v <span class="comment">// 其实很简单 引入一个临时局部变量就可以了，这样就可以将每次的值存储到该变量地址上</span></span><br><span class="line">fmt.Println(&amp;temp) <span class="comment">// 这里内存地址是不同的</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(temp *  temp) <span class="comment">// 直接打印结果</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, val  := <span class="keyword">range</span> slice &#123;</span><br><span class="line">val()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 1, 4, 9, 16, 25 预期结果</span></span><br></pre></td></tr></table></figure><p>只需要引入一个局部变量便可以解决了，这是必须的。否则你的程序将不会有可预期的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;捕获迭代变量&quot;&gt;&lt;a href=&quot;#捕获迭代变量&quot; class=&quot;headerlink&quot; title=&quot;捕获迭代变量&quot;&gt;&lt;/a&gt;捕获迭代变量&lt;/h2&gt;&lt;p&gt;这是在学习 &lt;strong&gt;Go 程序设计&lt;/strong&gt; 中遇到的一个比较重要的一个警告。这是个 Go </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="https://jaguarjack.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 陷阱之 for 循环迭代变量</title>
    <link href="https://jaguarjack.github.io/2019/04/07/go-for-error/"/>
    <id>https://jaguarjack.github.io/2019/04/07/go-for-error/</id>
    <published>2019-04-06T21:33:37.000Z</published>
    <updated>2021-06-16T01:05:39.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="捕获迭代变量"><a href="#捕获迭代变量" class="headerlink" title="捕获迭代变量"></a>捕获迭代变量</h2><p>这是在学习 <strong>Go 程序设计</strong> 中遇到的一个比较重要的一个警告。这是个 Go 语言的词法作用域规则的陷阱。看完之后感觉是真的一个比较让人疑惑困惑的地方。所以特地记录一下。由标题就可以知道了，迭代变量，肯定是在 <code>for</code> 中遇到的问题。来看一个简单的例子说明一下这个问题所在。</p><p>看一段简单的代码， 首先是错误的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var slice []func()</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">sli := []int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">for _, v := range sli &#123;</span><br><span class="line">fmt.Println(&amp;v)</span><br><span class="line">slice = append(slice, func()&#123;</span><br><span class="line">fmt.Println(v * v) // 直接打印结果</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for _, val  := range slice &#123;</span><br><span class="line">val()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 输出 25 25 25 25 25</span><br></pre></td></tr></table></figure><p>你可能会很奇怪为什么会出现这种情况, 结果不应该是 <code>1, 4, 9, 16, 25</code> 吗？其实原因是循环变量的作用域的规则限制。在上面的程序中，<code>v</code> 在 for 循环引进的一个块作用域内进行声明。在循环里创建的所有函数变量<code>共享相同的变量，就是一个可访问的存储位置，而不是固定的值</code>。(你会惊奇的发现 <code>&amp;v</code> 的内存地址是一样的)</p><p>模拟一下实际的情况，假设 v 变量的地址在 0x12345678 上， for 循环在迭代过程中，所有变量值都是在这地址上迭代的。当最后调用匿名函数的时候，取值也是在这块地址上。所以最后输出的结果都是迭代的最后一个值。至少在 Go 语言中是不用质疑的。这里也是一个陷阱，如果你不清楚的话，肯定会遇到坑。那个该如何修改呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var slice []func()</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">sli := []int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">for _, v := range sli &#123;</span><br><span class="line">    temp := v // 其实很简单 引入一个临时局部变量就可以了，这样就可以将每次的值存储到该变量地址上</span><br><span class="line">fmt.Println(&amp;temp) // 这里内存地址是不同的</span><br><span class="line">slice = append(slice, func()&#123;</span><br><span class="line">fmt.Println(temp *  temp) // 直接打印结果</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for _, val  := range slice &#123;</span><br><span class="line">val()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 输出 1, 4, 9, 16, 25 预期结果</span><br></pre></td></tr></table></figure><p>只需要引入一个局部变量便可以解决了，这是必须的。否则你的程序将不会有可预期的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;捕获迭代变量&quot;&gt;&lt;a href=&quot;#捕获迭代变量&quot; class=&quot;headerlink&quot; title=&quot;捕获迭代变量&quot;&gt;&lt;/a&gt;捕获迭代变量&lt;/h2&gt;&lt;p&gt;这是在学习 &lt;strong&gt;Go 程序设计&lt;/strong&gt; 中遇到的一个比较重要的一个警告。这是个 Go </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://jaguarjack.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="https://jaguarjack.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Waiting(TTFB) 等待时间过长</title>
    <link href="https://jaguarjack.github.io/2019/02/22/waitting-ttfb-to-long/"/>
    <id>https://jaguarjack.github.io/2019/02/22/waitting-ttfb-to-long/</id>
    <published>2019-02-21T22:13:17.000Z</published>
    <updated>2021-06-16T01:05:39.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p> 问题是在我修改后台的时候出现，因为最近要给我的<a href="https://gitee.com/lovephp/thinkphp51_backstage">后台管理</a>换后台皮肤，所以要重写一下后台页面。换完之后呢，发现每次请求页面都特么的长，然后就打打开 <code>Chrome</code> 的调试查看， 发现  <code>Waiting(TTFb)</code> 时间特别长，几乎所有占据了所有的请求时间。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li>切换浏览器，一开始我以为是浏览器问题，所以切换了  <code>Firefox</code>， 发现结果是一样</li><li>域名访问的问题，我是通过本地 <code>ip</code> 地址访问，切换到 <code>Apache</code> 服务器之后发现结果也是一样</li><li>怀疑是静态资源加载，发现静态资源加载都非常的快，排除</li></ul><p> 基本猜测结束发现，我发现什么无法解决问题，查看 tp 的日志文件，发现了问题，在 <code>Mysql Db Connect</code> 的时候，连接时间非常的长，长达 <code>1s</code>  以上，问题就出现在这里。为什么会出现这种情况呢？</p><p> 我发现 <code>host</code>  的地址不是 <code>127.0.0.1</code>  而是 <code>localhost</code></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><code>host</code> 文件添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure><p>为什么会这样呢？只需要两个步骤就可以看出来了。在没有配置上述配置之前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping localhost</span><br></pre></td></tr></table></figure><p>你会发现他指向的是 <code> ipv6 ：：1</code> 的地址， 问题就是出在这里。走的是 <code>IPV6</code>。改成 <code>IPV4</code> 的地址就可以了 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复现&quot;&gt;&lt;a href=&quot;#复现&quot; class=&quot;headerlink&quot; title=&quot;复现&quot;&gt;&lt;/a&gt;复现&lt;/h2&gt;&lt;p&gt; 问题是在我修改后台的时候出现，因为最近要给我的&lt;a href=&quot;https://gitee.com/lovephp/thinkphp51_</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="网络请求" scheme="https://jaguarjack.github.io/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>微信分享 JSSDK 实现</title>
    <link href="https://jaguarjack.github.io/2018/12/13/wx-sdk-share/"/>
    <id>https://jaguarjack.github.io/2018/12/13/wx-sdk-share/</id>
    <published>2018-12-12T22:18:36.000Z</published>
    <updated>2021-06-16T01:05:39.133Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要做个微信分享功能，记录下来以便后来复制粘贴，哈哈哈。<br>原谅我，我在做这个之前从网上的确复制粘贴了，最后发现都没法用，哈哈，只能自己看接口文档了。在这之前，首先你要获取 <code>appid</code> 和 appSecret，然后还要配置 <code>JS</code> <strong>安全域名</strong>，还有就是 <code>IP</code> <strong>白名单</strong>，这些我就不说了，有了微信公众号后台轻松搞定</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>我使用的是世界上最好的语言，不说大家都知道是什么了吧！哈哈哈，我就直接上代码了，注意点在代码里面看。注意项目用的<code> thinkphp</code> 框架，所以 <code>Cache</code> 根据实际使用，不能一股脑的粘贴啊</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">use Think\Cache;</span><br><span class="line"></span><br><span class="line">class WeChat</span><br><span class="line">&#123;</span><br><span class="line">  // 你的 appid</span><br><span class="line">    private $appId = &#x27;&#x27;; </span><br><span class="line"> // 秘钥</span><br><span class="line">    private $appSecret = &#x27;&#x27;; </span><br><span class="line"> // 获取 token 的 url</span><br><span class="line">    private $getAccessTokenUrl = &#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;; </span><br><span class="line">// 获取 jsticket 的 url</span><br><span class="line">    private $getJsTicketUrl = &#x27;https://api.weixin.qq.com/cgi-bin/ticket/getticket&#x27;;</span><br><span class="line"></span><br><span class="line">    private $cacheLiefTime = 3600;</span><br><span class="line"></span><br><span class="line">    private $cacheKey      = &#x27;ticket&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取签名</span><br><span class="line">     *</span><br><span class="line">     * @time at 2018年12月10日</span><br><span class="line">     * @param $url</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function getSignature($url)</span><br><span class="line">    &#123;</span><br><span class="line">        $nonceStr = $this-&gt;createNonceStr(18);</span><br><span class="line">        $timeStamp = time();</span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;jsapi_ticket&#x27; =&gt; $this-&gt;getJsTicket(),</span><br><span class="line">            &#x27;noncestr&#x27;     =&gt; $nonceStr,</span><br><span class="line">            &#x27;timestamp&#x27;    =&gt; $timeStamp,</span><br><span class="line">        ];</span><br><span class="line">  // 只有唯一的注意点，就是不要把 url 放在 http_build_query 函数里面，它会转义</span><br><span class="line">// 验证你的签名请到这里 http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</span><br><span class="line">        $signature = sha1(http_build_query($params) . &#x27;&amp;url=&#x27; . $url);</span><br><span class="line"></span><br><span class="line">        return [&#x27;noncestr&#x27; =&gt; $nonceStr, &#x27;timestamp&#x27; =&gt; $timeStamp, &#x27;signature&#x27; =&gt; $signature, &#x27;appid&#x27; =&gt; $this-&gt;appId];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取 TOKEN</span><br><span class="line">     *</span><br><span class="line">     * @time at 2018年12月10日</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    private function getAccessToken()</span><br><span class="line">    &#123;</span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;grant_type&#x27; =&gt; &#x27;client_credential&#x27;,</span><br><span class="line">            &#x27;appid&#x27;      =&gt; $this-&gt;appId,</span><br><span class="line">            &#x27;secret&#x27;     =&gt; $this-&gt;appSecret,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $res = $this-&gt;httpGet($this-&gt;getAccessTokenUrl .&#x27;?&#x27;.http_build_query($params));</span><br><span class="line">        $res = json_decode($res, true);</span><br><span class="line">        if (isset($res[&#x27;errcode&#x27;])) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $res[&#x27;access_token&#x27;];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取签名</span><br><span class="line">     *</span><br><span class="line">     * @time at 2018年12月10日</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    private function getJsTicket()</span><br><span class="line">    &#123;</span><br><span class="line">       $ticket = cache($this-&gt;cacheKey);</span><br><span class="line"></span><br><span class="line">        if ($ticket) &#123;</span><br><span class="line">            return $ticket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $accessToken = $this-&gt;getAccessToken();</span><br><span class="line"></span><br><span class="line">        $params = [</span><br><span class="line">            &#x27;access_token&#x27; =&gt; $accessToken,</span><br><span class="line">            &#x27;type&#x27;         =&gt; &#x27;jsapi&#x27;,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        if (!$accessToken) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $res = $this-&gt;httpGet($this-&gt;getJsTicketUrl .&#x27;?&#x27;.http_build_query($params));</span><br><span class="line">        $res = json_decode($res, true);</span><br><span class="line"></span><br><span class="line">        if (isset($res[&#x27;errcode&#x27;]) &amp;&amp; $res[&#x27;errcode&#x27;]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        Cache::remember($this-&gt;cacheKey, $res[&#x27;ticket&#x27;], $this-&gt;cacheLiefTime);</span><br><span class="line"></span><br><span class="line">        return $res[&#x27;ticket&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function httpGet($url)</span><br><span class="line">    &#123;</span><br><span class="line">        $curl = curl_init();</span><br><span class="line">        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">        curl_setopt($curl, CURLOPT_TIMEOUT, 500);</span><br><span class="line">        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);</span><br><span class="line">        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);</span><br><span class="line">        curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class="line">        $res = curl_exec($curl);</span><br><span class="line">        curl_close($curl);</span><br><span class="line"></span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function createNonceStr($n)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!is_numeric($n)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $str = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">        $nonceStr = &#x27;&#x27;;</span><br><span class="line">        $strLen = strlen($str);</span><br><span class="line">        for ($i = 1; $i &lt; intval($n); $i++) &#123;</span><br><span class="line">            $nonceStr .= $str[rand(0, $strLen-1)];</span><br><span class="line">        &#125;</span><br><span class="line">        return $nonceStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><blockquote><p>引入 <a href="http://res2.wx.qq.com/open/js/jweixin-1.4.0.js">http://res2.wx.qq.com/open/js/jweixin-1.4.0.js</a>  网上都是 1.2.0，抄的我好累</p></blockquote><h5 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 注意微信文档提到 url 不允许带 # 后面的内容，所以就分割吧, 还有下面你看一下就懂了吧。</span><br><span class="line">// 微信好多接口都换了，使用也和网上的一点也不一样了，所以如果当你看到这篇文章文章使用不能成功的时候，建议你去看微信文档, 不要再抄这个了。还有就是调试期间把 debug 开下来。</span><br><span class="line">var url = window.location.href.split(&#x27;#&#x27;)[0];</span><br><span class="line">    $.post(&quot;&#123;:url(&#x27;Index/getWxConfig&#x27;)&#125;&quot;, &#123;&quot;url&quot;: url&#125;, function (response)&#123;</span><br><span class="line">        var params = &#123;&#125;</span><br><span class="line">        params.debug = false;</span><br><span class="line">        params.appId = response.data.appid;</span><br><span class="line">        params.timestamp = response.data.timestamp;</span><br><span class="line">        params.nonceStr = response.data.noncestr;</span><br><span class="line">        params.signature = response.data.signature;</span><br><span class="line">        params.jsApiList = [&#x27;updateAppMessageShareData&#x27;,&#x27;updateTimelineShareData&#x27;];</span><br><span class="line">        wx.config(params);</span><br><span class="line">        wx.ready(function () &#123;</span><br><span class="line">            wx.updateAppMessageShareData(&#123;</span><br><span class="line">                title: &#x27;我就是不信&#x27;,</span><br><span class="line">                desc: &#x27;微信分享成功了没&#x27;,</span><br><span class="line">                link: url,</span><br><span class="line">                imgUrl: &#x27;http://aaaa.gaiwenkeji.com/data/upload/qrcode/7.png?id=1544524256&#x27;,</span><br><span class="line">                type: &#x27;link&#x27;,</span><br><span class="line">                dataUrl: &#x27;&#x27;,</span><br><span class="line">            &#125;);</span><br><span class="line">            wx.updateTimelineShareData(&#123;</span><br><span class="line">                title: &#x27;我相信了, 能不信吗&#x27;,</span><br><span class="line">                link: url,</span><br><span class="line">                imgUrl: &#x27;http://aaaa.gaiwenkeji.com/data/upload/qrcode/7.png?id=1544524256&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>以上便是微信分享的所有东西，没有什么坑。坑就是我抄网上的。还有就是签名 <code>URL</code> 转义的，其他就没咯。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>2018/12/24 新的微信接口在安卓系统会无效，建议使用老接口，IOS 上可以继续使用新的接口 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近公司要做个微信分享功能，记录下来以便后来复制粘贴，哈哈哈。&lt;br&gt;原谅我，我在做这个之前从网上的确复制粘贴了，最后发现都没法用，哈哈，只能自己看接口文档了。在这之前，首先你要获取 &lt;code&gt;appid&lt;/code&gt; 和 appSecret，然后还要配置 &lt;code&gt;J</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微信分享" scheme="https://jaguarjack.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>v2ray 更安全的代理服务</title>
    <link href="https://jaguarjack.github.io/2018/12/06/v2ray/"/>
    <id>https://jaguarjack.github.io/2018/12/06/v2ray/</id>
    <published>2018-12-05T22:45:35.000Z</published>
    <updated>2021-06-16T01:05:39.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p> 由于最近使用 vps 连续被封禁，不知是否是因为切换到 SSR 的缘故？我从网络上看到很多关于 SSR 被封禁的情况，好像是由于墙不需要去特意破解什么加密，而是根据 SSR 某些特征可以大概率查封。对于我而言，我还是信服这种说法，因为在我切换到 SSR 之后不到三天我的两台服务器连续被封禁了，这让我不知所措。因为在这之前没去好好了解实际情况，我面对这种情况真的显得很无奈，好好地两台 VPS 居然都被封了，只好忍痛又买了一台。</p><h3 id="发现-V2ray"><a href="#发现-V2ray" class="headerlink" title="发现 V2ray"></a>发现 V2ray</h3><p> 在论坛上看到很多人也遇到过这种情况，很多都推荐使用 V2ray，新的协议，伪装程度高，各种优点。而且现在 SS 和 SSR 停止更新了，从 V2ray github 上来看，更新很频繁，而且功能也在不停地增加。<br> 对于这个时候的我，其实已经不在乎速度了，更加在乎的是安全和长久，因为我只是用来查查资料，基本很少看视频，对于速度要求不高。当然现在已经搭建的这台代理速度还是可以的，油管的 1080 很流畅。而且好几个人在用。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p> 本身 v2ray 服务支持很多种方案，具体有多少我都忘了。有兴趣的可以去查查博客。这里我只介绍我正在使用方案，也是大家普遍认可而且安全比较高的方案 。</p><blockquote><p>v2ray + nginx + websocket + tls</p></blockquote><p>当前你首先必须拥有一台 <code>VPS</code>，推荐肯定就是搬瓦工的 <code>KVM</code> 架构的了。安装请选择带有 <code>BBR</code> 的系统。<code>BBR</code> 是由 GOOGLE 提出的一个开源 <code>TCP</code> 拥塞控制的算法。这里有一篇<a href="https://blog.csdn.net/dog250/article/details/52830576">文章</a>作了详细的介绍，有兴趣的可以看看。还是你必须拥有一个域名，这是必须的。如果没有，那你可以先关闭该页面，申请完再来看了，或者找一下其他的 v2ray 的解决方案了。<br>这套方案的思路就是利用 nginx 作为中转来做伪装。相比于 SSR 的直连，在 v2ray 客户端发出 ws 的请求到 nginx，然后利用 nginx 的代理直接转发到 v2ray 的服务上面。这样就可以将请求伪装成正常 ws 的请求 。</p><h3 id="安装-（Centos7-系统）"><a href="#安装-（Centos7-系统）" class="headerlink" title="安装 （Centos7 系统）"></a>安装 （Centos7 系统）</h3><h4 id="安装-v2ray"><a href="#安装-v2ray" class="headerlink" title="安装 v2ray"></a>安装 v2ray</h4><p>我还是推荐一键脚本，这也是由官方维护的，所以我认为你没必要再去自己搞什么编译啥的，也没多大意义。目前还是能成功安全起来为主。以后有兴趣了再去搞搞也还行。执行下面的命令就可以了</p><blockquote><p>bash &lt;(curl -L -s <a href="https://install.direct/go.sh">https://install.direct/go.sh</a>)</p></blockquote><p>使用以下命令来控制 v2ray 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start|restart|stop|status v2ray</span><br></pre></td></tr></table></figure><p>其配置文件放在 <code>/etc/v2ray/config.json</code>，是一个 <code>Json</code> 文件，在你安装完之后会有一个初始化的 <code>Json</code> 文件，文件会提供三个必要的信息 <code>IP</code>、端口（<code>Port</code>）、<code>id（UUID）</code>, 尤其是这个 UUID，很重要。客户端会使用到，必须保持和服务端一致。当然你可以自己生成所需要的 UUID，到这个网站  <a href="https://www.uuidgenerator.net/">Online UUID Generator </a> 生成就可以了。</p><p>执行 <code>systemctl start v2ray</code> 然后执行 <code>systemctl status v2ray</code> 之后，如果看到绿色的 <code>active(running)</code>  就说明启动成功了，这里就先将所有服务先安装好，配置在最后一块配置就行了。</p><h4 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel open openssl-devel</span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.1.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf nginx-1.14.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.1</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>五部 Nginx 就安装好了。最后加一下软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/bin/</span><br></pre></td></tr></table></figure><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>这里假设你已经拥有了域名，并且增加了 A 解析到该台 VPS。下面我们申请证书，证书过程也很简单。安装两个脚本便可以了。这里利用 Certbot 来申请。执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y certbot</span><br><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>安裝成功后执行 <code>source ~/.bashrc</code> 以确保脚本所设置的命令別名生效。<br>如果安装报错，那么可能是因为系统缺少 <code>acme.sh</code> 所需要的依赖项, <code>acme.sh</code> 的依赖项主要是 <code>netcat(nc)</code>, 我们通过以下命令来安装这些依赖，然后重新安装一遍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install netcat</span><br></pre></td></tr></table></figure><p>生成证书之前，请确保宿主机上的 80 端口没有被占用，否则会安装失败</p><blockquote><p>~/.acme.sh/acme.sh –issue -d mydomain.me –standalone -k ec-256</p></blockquote><p><code>-k</code> 表示秘钥长度，后面的值可以是 <code>ec-256</code> 、<code>ec-384</code>、2048、3072、4096、8192，带有 <code>ec</code> 表示生成的是 <code>ECC</code> 证书，沒有则是 <code>RSA</code> 证书。在安全性上 256 位的 <code>ECC</code> 证书等同于 3072 位的 <code>RSA</code> 证书。</p><p>Let’s Encrypt 的证书有效期只有 3 個月，因此需要 90 天至少要更新一次证书，acme.sh脚本会每 60 天自动更新证书，。也可以手动更新。</p><p>手动更新 ECC 证书，执行：</p><blockquote><p>sudo ~/.acme.sh/acme.sh –renew -d mydomain.com –force –ecc</p></blockquote><p>如果是 RSA 证书则执行：</p><blockquote><p>sudo ~/.acme.sh/acme.sh –renew -d mydomain.com –force</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="v2ray服务端配置"><a href="#v2ray服务端配置" class="headerlink" title="v2ray服务端配置"></a>v2ray服务端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;access&quot;</span>: <span class="string">&quot;/var/log/v2ray/access.log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;/var/log/v2ray/error.log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;loglevel&quot;</span>: <span class="string">&quot;debug&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;inbound&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: ***, // 你的实际端口号</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;clients&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="comment">### uuid,</span></span><br><span class="line">          <span class="string">&quot;alterId&quot;</span>: 64,</span><br><span class="line">          <span class="string">&quot;level&quot;</span>: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;streamSettings&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;network&quot;</span>: <span class="string">&quot;ws&quot;</span>,</span><br><span class="line">      <span class="string">&quot;security&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">      <span class="string">&quot;wsSettings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;path&quot;</span>, // 自定义</span><br><span class="line">        <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;yourDomain&quot;</span> // 你的域名地址</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;outbound&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;outboundDetour&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;blackhole&quot;</span>,</span><br><span class="line">      <span class="string">&quot;settings&quot;</span>: &#123; &#125;,</span><br><span class="line">      <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;blocked&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;routing&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;strategy&quot;</span>: <span class="string">&quot;rules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;rules&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ip&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;0.0.0.0/8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;10.0.0.0/8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;100.64.0.0/10&quot;</span>,</span><br><span class="line">            <span class="string">&quot;127.0.0.0/8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;169.254.0.0/16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;172.16.0.0/12&quot;</span>,</span><br><span class="line">            <span class="string">&quot;192.0.0.0/24&quot;</span>,</span><br><span class="line"><span class="string">&quot;192.0.2.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;198.18.0.0/15&quot;</span>,</span><br><span class="line">            <span class="string">&quot;198.51.100.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;203.0.113.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;::1/128&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fc00::/7&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fe80::/10&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;outboundTag&quot;</span>: <span class="string">&quot;blocked&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        <span class="comment"># 禁用不需要的请求方式 以下只允许 get、post</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_method</span>  !~ ^(POST|GET)$) &#123;</span><br><span class="line">                <span class="built_in">return</span>  444;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        listen          80;</span><br><span class="line">        server_name     yourDomain;        <span class="comment">#注：填写自己的域名</span></span><br><span class="line">        <span class="built_in">return</span>          301  yourDomain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream v2ray &#123;</span><br><span class="line">        server          127.0.0.1:端口;        <span class="comment">#注：v2ray后端监听地址、端口</span></span><br><span class="line">        keepalive       2176;   <span class="comment"># 链接池空闲链接数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">        default         upgrade;</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>              close;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        <span class="comment">#要开启 HTTP/2 注意nginx版本</span></span><br><span class="line">        <span class="comment">#可以使用 nginx -V 检查</span></span><br><span class="line">        listen  443 ssl http2 backlog=1024 so_keepalive=120s:60s:10 reuseport;  <span class="comment"># backlog是nginx 监听队列 默认是511 使用命令 ss -tnl查看(Send-Q);</span></span><br><span class="line">        <span class="comment">#设置编码</span></span><br><span class="line">        charset         utf-8;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#证书配置</span></span><br><span class="line">        ssl_certificate         path;   <span class="comment">#注：填写自己证书路径</span></span><br><span class="line">        ssl_certificate_key    path;   <span class="comment">#注：填写密钥路径</span></span><br><span class="line"></span><br><span class="line">        ssl_session_cache       shared:SSL:50m;</span><br><span class="line">        ssl_session_timeout     1d;</span><br><span class="line">        ssl_session_tickets     off;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># https://nginx.org/en/docs/http/ngx_http_ssl_module.html</span></span><br><span class="line">        ssl_protocols   TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        <span class="comment">#openssl ciphers</span></span><br><span class="line">        <span class="comment">#注：懒人配置   https://mozilla.github.io/server-side-tls/ssl-config-generator/</span></span><br><span class="line">        ssl_ciphers     HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#安全设定</span></span><br><span class="line">        <span class="comment">#屏蔽请求类型</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_method</span>  !~ ^(POST|GET)$) &#123;</span><br><span class="line">                <span class="built_in">return</span>  444;</span><br><span class="line">        &#125;</span><br><span class="line">        add_header      X-Frame-Options         DENY;</span><br><span class="line">        add_header      X-XSS-Protection        <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        add_header      X-Content-Type-Options  nosniff;</span><br><span class="line">        add_header      Strict-Transport-Security max-age=15 always;</span><br><span class="line">        root    /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        index index.html index.htm  index.php ;</span><br><span class="line"></span><br><span class="line">        server_name     yourDomain;        <span class="comment">#注： 将domain.Name 替换成你的域名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /path &#123; <span class="comment">#注：修改路径，上述服务端 ws 配置的 path</span></span><br><span class="line">                proxy_http_version      1.1;</span><br><span class="line">                proxy_set_header        Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">                proxy_set_header        Connection <span class="string">&quot;upgrade&quot;</span>;   <span class="comment">#此处与&lt;map&gt;对应</span></span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                sendfile                on;</span><br><span class="line">                tcp_nopush              on;</span><br><span class="line">                tcp_nodelay             on;</span><br><span class="line">                keepalive_requests      25600;</span><br><span class="line">                keepalive_timeout       300 300;</span><br><span class="line">                proxy_buffering         off;</span><br><span class="line">                proxy_buffer_size       8k;</span><br><span class="line"></span><br><span class="line">                <span class="comment">#后端错误重定向</span></span><br><span class="line">                proxy_intercept_errors on;</span><br><span class="line">                error_page 400 = <span class="string">&quot;yourDomain&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$http_host</span> = <span class="string">&quot;yourDomain&quot;</span> ) &#123;</span><br><span class="line">                        proxy_pass      http://127.0.0.1:端口; // 设置 v2ray 监听的地址</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端推荐使用 <code>v2rayN</code>,  这是一款 window 界面的产品，配置很简单。<br><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpzfy0vdavj20kc0e9weq.jpg"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><code>v2rayN</code> 这款客户端无法代理 <strong>go get</strong>，原因不详，<code>wireshark</code> 无法抓到包，本身的 <code>shadowsocks</code> 客户端正常</li><li>添加 shadowsocks 服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;inboundDetour&quot;</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;shadowsocks&quot;</span>,</span><br><span class="line">     <span class="string">&quot;port&quot;</span>: 10086, // 自行设置</span><br><span class="line">     <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;aes-256-cfb&quot;</span>, // 和客户端设置的加密方式一样，自行设置</span><br><span class="line">      <span class="string">&quot;password&quot;</span>: <span class="string">&quot;****&quot;</span>, // 密码设置</span><br><span class="line">      <span class="string">&quot;udp&quot;</span>: <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上便是安装的全部过程，可能过程有疏漏，也可能你在配置的过程中最后访问不了，问题有很多，可能是版本，也可能是环境问题。遇到问题请自行 google。<br>还有千万不要 <em>粘贴复制 粘贴复制 粘贴复制</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h3&gt;&lt;p&gt; 由于最近使用 vps 连续被封禁，不知是否是因为切换到 SSR 的缘故？我从网络上看到很多关于 SSR 被封禁的情况，好像是由于墙不需要去</summary>
      
    
    
    
    <category term="工具笔记" scheme="https://jaguarjack.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="v2ray" scheme="https://jaguarjack.github.io/tags/v2ray/"/>
    
  </entry>
  
</feed>
